"""
Universal Binary Principle (UBP) Framework v3.2+ - UBP Pattern Visualizer
Author: Euan Craig, New Zealand
Date: 03 September 2025
================================================

"""
import numpy as np
import matplotlib.pyplot as plt
import os
from typing import Dict, Any, List

from ubp_pattern_integrator import UBPPatternIntegrator
from ubp_config import get_config # To ensure config is available if needed by integrator

def visualize_patterns():
    print("\n--- Verifying CRV Pattern Generation and Visualizing (Comprehensive 256 Study) ---")

    # Initialize UBPPatternIntegrator to interact with HexDictionary
    integrator = UBPPatternIntegrator()

    # Search for patterns generated by the '256_study' method
    # The data_type and source_module reflect the UBP256Evolution class being used now.
    search_criteria = {
        "data_type": "ubp_pattern_256study",
        "source_module": "ubp_256_study_evolution.py"
    }
    
    # Retrieve up to 5 patterns for visualization
    found_patterns_meta_list = integrator.search_patterns_by_metadata(search_criteria, limit=5)

    if not found_patterns_meta_list:
        print("❌ No comprehensive CRV patterns from '256_study' found in HexDictionary with current search criteria.")
        print("This might be expected if the generation script has not run yet or did not produce results.")
        return

    print(f"✅ Found {len(found_patterns_meta_list)} comprehensive CRV patterns. Generating visualizations...")

    output_viz_dir = "/output/crv_pattern_visualizations/"
    os.makedirs(output_viz_dir, exist_ok=True)
    generated_pngs = []

    for i, pattern_meta_info in enumerate(found_patterns_meta_list):
        pattern_hash = pattern_meta_info['hash']
        metadata = pattern_meta_info['metadata']
        
        # Extract relevant info from metadata (now nested under 'additional_metadata.pattern_details')
        # And analysis results under 'additional_metadata.analysis_results'
        additional_metadata = metadata.get('additional_metadata', {})
        pattern_details = additional_metadata.get('pattern_details', {})
        analysis_results = additional_metadata.get('analysis_results', {})

        realm_context = metadata.get('realm_context', 'unknown_realm')
        crv_key = pattern_details.get('crv_key', 'N/A')
        removal_type = pattern_details.get('removal_type', 'N/A')
        coherence_score = analysis_results.get('coherence_score', 'N/A')
        pattern_classification = analysis_results.get('pattern_classification', 'N/A')
        
        # Retrieve the actual pattern array
        pattern_data_dict = integrator.get_pattern_by_hash(pattern_hash)
        
        if pattern_data_dict and 'pattern_array' in pattern_data_dict:
            retrieved_pattern_array_candidate = pattern_data_dict['pattern_array']
            print(f"DEBUG: Retrieved pattern array candidate type for hash {pattern_hash[:8]}... : {type(retrieved_pattern_array_candidate)}") # Debug print

            if isinstance(retrieved_pattern_array_candidate, np.ndarray):
                pattern_array = retrieved_pattern_array_candidate

                # Create a visualization
                plt.figure(figsize=(8, 8))
                plt.imshow(pattern_array, cmap='viridis', origin='lower')
                plt.title(f"256 Study CRV Pattern: {realm_context} ({crv_key})\nRemoval: {removal_type}, Coherence: {coherence_score:.3f}\nClassification: {pattern_classification} (Hash: {pattern_hash[:8]}...)")
                plt.colorbar(label='Amplitude')
                plt.axis('off')

                filename = f"crv_256_study_pattern_{realm_context}_{crv_key}_{removal_type}_{pattern_hash[:8]}.png"
                filepath = os.path.join(output_viz_dir, filename)
                plt.savefig(filepath, bbox_inches='tight')
                plt.close() # Close the plot to free memory

                generated_pngs.append(filepath)
                print(f"Generated visualization for {realm_context} ({crv_key}, {removal_type}): {filename}")
            else:
                print(f"⚠️ Retrieved data for hash {pattern_hash[:8]}... is NOT a NumPy array (found {type(retrieved_pattern_array_candidate)}). Skipping visualization.")
        else:
            print(f"⚠️ Could not retrieve pattern data or 'pattern_array' for hash: {pattern_hash[:8]}... Skipping.")

    print("\n--- CRV Pattern Visualization Complete ---")
    if generated_pngs:
        print("Generated PNGs in /output/crv_pattern_visualizations/ :")
        for png_file in generated_pngs:
            print(f"- {png_file}")
    else:
        print("No PNG visualizations were generated.")